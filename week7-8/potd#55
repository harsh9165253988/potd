24. Swap Nodes in Pairs  //Leetcode

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {

          if(head==null||head.next==null)
        {
            return head;
        }
        ListNode prev=head;
        head=head.next;
      ListNode cur=head.next;
      head.next=prev;
      prev.next=cur;
        while(cur!=null&&cur.next!=null)
        { 
           ListNode temp;
            temp=cur.next.next;
           prev.next=cur.next;

           prev=cur;
           cur.next.next=prev;
           cur.next=temp;
           cur=temp;

          

        }

return head;
        
    }
}

1721. Swapping Nodes in a Linked List  //Leetcode

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode last=dummy.next;
        ListNode second=dummy;
        ListNode first=dummy.next;
        for(int i=0;i<k;i++)
        {
            last=last.next;
            second=second.next;
        }
        while(last!=null)
        {
            first=first.next;
            last=last.next;
        }
        int temp=first.val;
        first.val=second.val;
        second.val=temp;

        // System.out.println(first.val);
        //  System.out.println(second.val);
         return head;
        
        
        
    }
}
