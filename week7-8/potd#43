2. Add Two Numbers   //LeetCode
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
         int carry=0;
         ListNode dummy=new ListNode(0);
         ListNode p=dummy;
         
         
    while(l1!=null||l2!=null||carry!=0)
    {   int sum=0;
        if(l1!=null)
        {
      sum=sum+l1.val;
      l1=l1.next;
        }
        if(l2!=null)
        {
            sum+=l2.val;
            l2=l2.next;
        }
        sum+=carry;
        carry=sum/10;
        ListNode node=new ListNode(sum%10);

        p.next =node;
        p=node;
    }
      return dummy.next;  
    }
}


203. Remove Linked List Elements   //Leetcode


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode ptr;
        ptr=dummy;
        while(ptr.next!=null)
        {
            if(ptr.next.val==val)
            {
                ptr.next=ptr.next.next;
            }
            else
           ptr=ptr.next;
        }
        return dummy.next;
        
    }
}
