328. Odd Even Linked List  //Leetcode

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
     
       // ListNode scd=new ListNode(0);
      ListNode even=head;
      ListNode even_head=even;
      if(even==null)
      return head;
      ListNode odd=head.next;
      ListNode odd_head=odd;
      
      while(even.next!=null&&odd.next!=null)
      {
        even.next=odd.next;
        even=even.next;
        odd.next=even.next;
        odd=odd.next;

        
      }

      even.next=odd_head;
      return even_head;
        
    }
}


83. Remove Duplicates from Sorted List   //Leetcode

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dumy=new ListNode(-150);
        dumy.next=head;
        ListNode p=dumy;

        while(p.next!=null)
        {
            if(p.val==p.next.val)
            {
                p.next=p.next.next;
            }
            else
            p=p.next;
        }
        
        return dumy.next;
        
    }
}
