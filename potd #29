Number of occurrence  //GeeksForGeeks
//{ Driver Code Starts
//Initial Template for Java



import java.util.*;
import java.io.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine().trim());
        while (tc-- > 0) {
            String[] inputLine;
            inputLine = br.readLine().trim().split(" ");
            int n = Integer.parseInt(inputLine[0]);
            int x = Integer.parseInt(inputLine[1]);
            int[] arr = new int[n];
            inputLine = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                arr[i] = Integer.parseInt(inputLine[i]);
            }

            int ans = new Solution().count(arr, n, x);
            System.out.println(ans);
        }
    }
}

// } Driver Code Ends


//User function Template for Java



class Solution {
    int count(int[] arr, int n, int x) {
        
        int lb=n;
        int ub=n;
        int start=0;
        int end=n-1;
        while(start<=end)
    
      {
          int mid=(start+end)/2;
          if(arr[mid]>=x)
          {
              lb=mid;
              end=mid-1;
          }
          else
          {
              start=mid+1;
          }
      } 
      if(lb==n||arr[lb]!=x)
      return 0;
      else
      {start=0;
         end=n-1;
          while(start<=end)
    
      {
          int mid=(start+end)/2;
          if(arr[mid]>x)
          {
              ub=mid;
              end=mid-1;
          }
          else
          {
              start=mid+1;
          }
      }
    //   System.out.println(ub);
    //   System.out.println(lb);
    //   if(ub==n)
    //   return ub-lb;
    //   else
       return ub-lb;
      } 
     
      
    }
}

2089. Find Target Indices After Sorting Array   //Leetcode

class Solution {
    public List<Integer> targetIndices(int[] nums, int target) {
        ArrayList<Integer>arr=new ArrayList<>();
        Arrays.sort(nums);
        int n=nums.length;
        int lb=n;
        int ub=n;
        int start=0;
        int end=nums.length-1;
        while(start<=end)
        {
            int mid=(start+end)/2;
            if(nums[mid]>=target)
            {
                lb=mid;
                end=mid-1;

            }
            else
            {
                start=mid+1;
            }
        }
        if(lb!=n&&nums[lb]!=target)
        {return arr;}
        else
        {
        start=0;
         end=nums.length-1;
        
         while(start<=end)
        {
            int mid=(start+end)/2;
            if(nums[mid]>target)
            {
                ub=mid;
                end=mid-1;

            }
            else
            {
                start=mid+1;
            }
        }
        }
       
        for(int i=lb;i<ub;i++)
        {
            arr.add(i);

        }
       
        
return arr;
        

        
    }
}
 
