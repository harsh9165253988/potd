540. Single Element in a Sorted Array  //Leetcode

class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        int start=1;
        int end=nums.length-2;
        if(nums.length==1)
        return nums[0];
        else if(nums[0]!=nums[1])
        return nums[0];
         else if(nums[nums.length-1]!=nums[nums.length-2])
        return nums[nums.length-1];
        else
        while(start<=end)
        {
            int mid=(start+end)/2;
            if(nums[mid]!=nums[mid-1]&&nums[mid]!=nums[mid+1])
            {
                return nums[mid];
            }

            else if(nums[mid]==nums[mid-1])
            {
                if((mid-1)%2==0)
                {
                    start=mid+1;
                }
                else
                end=mid-1;
            }
            else
            {
                if((mid+1)%2==0)
                {
                    end=mid-1;
                }
                else
                start=mid+1;
            }
        }
        return -1;
        
    }
}

153. Find Minimum in Rotated Sorted Array

class Solution {
    public int findMin(int[] nums) {
        int start=0;
        int end=nums.length-1;
        
        while (start<=end)
        {
            int mid=(start+end)/2;
            if(mid>0 && nums[mid]<nums[mid-1])
            return nums[mid];
             else if(nums[mid]>nums[end])
            {start=mid+1;
            }
             else
             end=mid-1;


        }
  
         return nums[start];
    }
   
}
